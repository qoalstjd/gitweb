{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useContext, useState } from 'react';\nimport { createHashHistory } from 'history'; // history 패키지의 createHashHistory 함수를 사용\nimport { ModalsDispatchContext } from '../modal/ModalsContext';\nconst history = createHashHistory();\nexport default function useModals() {\n  _s();\n  const {\n    open,\n    close\n  } = useContext(ModalsDispatchContext);\n  const [currentModal, setCurrentModal] = useState(null);\n\n  // 해시의 변경을 감지하기 위한 listen 함수\n  const unlisten = history.listen((location, action) => {\n    const currentPath = location.hash; // 해시 값을 가져옵니다.\n\n    // 특정 조건에 따라 모달을 닫기\n    if (currentPath !== '#/popup' && currentModal) {\n      close(currentModal);\n      setCurrentModal(null);\n    }\n  });\n\n  // 컴포넌트가 언마운트될 때 리스너 해제\n  useEffect(() => {\n    return () => {\n      unlisten();\n    };\n  }, [unlisten]);\n  const openModal = (Component, props) => {\n    // 모달을 엽니다.\n    open(Component, props);\n\n    // 해시에 새로운 엔트리를 추가하고, 열린 모달 정보를 추적합니다.\n    history.push('/popup');\n    setCurrentModal(Component);\n  };\n  const closeModal = () => {\n    // 모달을 닫고 브라우저 히스토리에서 뒤로 이동합니다.\n    history.goBack();\n    close(currentModal);\n    setCurrentModal(null);\n  };\n  return {\n    openModal,\n    closeModal\n  };\n}\n_s(useModals, \"DpLXYXAyOAWec6c7I6XdLejMGZQ=\");","map":{"version":3,"names":["useEffect","useContext","useState","createHashHistory","ModalsDispatchContext","history","useModals","_s","open","close","currentModal","setCurrentModal","unlisten","listen","location","action","currentPath","hash","openModal","Component","props","push","closeModal","goBack"],"sources":["/Users/maegmini/Documents/study/pension-bonjour/src/components/hooks/useModals.js"],"sourcesContent":["import { useEffect, useContext, useState } from 'react';\nimport { createHashHistory } from 'history'; // history 패키지의 createHashHistory 함수를 사용\nimport { ModalsDispatchContext } from '../modal/ModalsContext';\n\nconst history = createHashHistory();\n\nexport default function useModals() {\n\tconst { open, close } = useContext(ModalsDispatchContext);\n\tconst [currentModal, setCurrentModal] = useState(null);\n\n\t// 해시의 변경을 감지하기 위한 listen 함수\n\tconst unlisten = history.listen((location, action) => {\n\t\tconst currentPath = location.hash; // 해시 값을 가져옵니다.\n\n\t\t// 특정 조건에 따라 모달을 닫기\n\t\tif (currentPath !== '#/popup' && currentModal) {\n\t\t\tclose(currentModal);\n\t\t\tsetCurrentModal(null);\n\t\t}\n\t});\n\n\t// 컴포넌트가 언마운트될 때 리스너 해제\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tunlisten();\n\t\t};\n\t}, [unlisten]);\n\n\tconst openModal = (Component, props) => {\n\t\t// 모달을 엽니다.\n\t\topen(Component, props);\n\n\t\t// 해시에 새로운 엔트리를 추가하고, 열린 모달 정보를 추적합니다.\n\t\thistory.push('/popup');\n\t\tsetCurrentModal(Component);\n\t};\n\n\tconst closeModal = () => {\n\t\t// 모달을 닫고 브라우저 히스토리에서 뒤로 이동합니다.\n\t\thistory.goBack();\n\t\tclose(currentModal);\n\t\tsetCurrentModal(null);\n\t};\n\n\treturn {\n\t\topenModal,\n\t\tcloseModal,\n\t};\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,iBAAiB,QAAQ,SAAS,CAAC,CAAC;AAC7C,SAASC,qBAAqB,QAAQ,wBAAwB;AAE9D,MAAMC,OAAO,GAAGF,iBAAiB,CAAC,CAAC;AAEnC,eAAe,SAASG,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAGR,UAAU,CAACG,qBAAqB,CAAC;EACzD,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMU,QAAQ,GAAGP,OAAO,CAACQ,MAAM,CAAC,CAACC,QAAQ,EAAEC,MAAM,KAAK;IACrD,MAAMC,WAAW,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAEnC;IACA,IAAID,WAAW,KAAK,SAAS,IAAIN,YAAY,EAAE;MAC9CD,KAAK,CAACC,YAAY,CAAC;MACnBC,eAAe,CAAC,IAAI,CAAC;IACtB;EACD,CAAC,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACf,OAAO,MAAM;MACZY,QAAQ,CAAC,CAAC;IACX,CAAC;EACF,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMM,SAAS,GAAGA,CAACC,SAAS,EAAEC,KAAK,KAAK;IACvC;IACAZ,IAAI,CAACW,SAAS,EAAEC,KAAK,CAAC;;IAEtB;IACAf,OAAO,CAACgB,IAAI,CAAC,QAAQ,CAAC;IACtBV,eAAe,CAACQ,SAAS,CAAC;EAC3B,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACxB;IACAjB,OAAO,CAACkB,MAAM,CAAC,CAAC;IAChBd,KAAK,CAACC,YAAY,CAAC;IACnBC,eAAe,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,OAAO;IACNO,SAAS;IACTI;EACD,CAAC;AACF;AAACf,EAAA,CA1CuBD,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}